/*
 * Copyright 2023 Signal Messenger, LLC
 * SPDX-License-Identifier: AGPL-3.0-only
 */

syntax = "proto3";

package calling;

message Empty {}

message Registration {
  // From, the client that is registering.
  string client = 1;
}

message CallMessage {
  message Offer {
    enum Type {
      OFFER_AUDIO_CALL = 0;
      OFFER_VIDEO_CALL = 1;
    }

    uint64 id     = 1;
    Type   type   = 2;
    bytes  opaque = 3;
  }

  message Answer {
    uint64 id     = 1;
    bytes  opaque = 2;
  }

  message IceUpdate {
    uint64 id     = 1;
    bytes  opaque = 2;
  }

  message Busy {
    uint64 id = 1;
  }

  message Hangup {
    enum Type {
      HANGUP_NORMAL          = 0;
      HANGUP_ACCEPTED        = 1;
      HANGUP_DECLINED        = 2;
      HANGUP_BUSY            = 3;
      HANGUP_NEED_PERMISSION = 4;
    }

    uint64 id       = 1;
    Type   type     = 2;
    uint32 deviceId = 3;
  }

  Offer     offer              = 1;
  Answer    answer             = 2;
  repeated IceUpdate iceUpdate = 3;
  Busy      busy               = 4;
  Hangup    hangup             = 5;
}

// The RelayMessage is essentially the message envelope, containing the actual
// call message along with other meta data.
message RelayMessage {
  // From, the client that is sending the message.
  string client           = 1;
  // The deviceId of the client that is sending the message.
  uint32 deviceId         = 2;
  // The actual message we are passing through.
  CallMessage callMessage = 3;
}

service SignalingRelay {
  // The client will register with the server, and this is a "server-side streaming RPC".
  rpc Register (Registration) returns (stream RelayMessage);
  // After registering, the client can send messages, and this is a "Simple RPC".
  rpc Send (RelayMessage) returns (Empty);
}

message CommandMessage {
  enum Command {
    START_AS_CALLER = 0;
    START_AS_CALLEE = 1;
    STOP            = 2;
  }

  // To, the client that should receive the message.
  string client   = 1;
  // The command to send.
  Command command = 2;
}

message Event {
  // The number of clients that are ready for the test. Increments with ready, decrements with done.
  int32 readyCount = 1;
}

service TestManagement {
  // Each test client will let the server know when it is ready (generally after it registers with the
  // relay server, and thus be able to receive commands).
  rpc Ready (Registration) returns (stream CommandMessage);
  // The client can let the server (and test manager) know it is done (after stopping).
  rpc Done (Registration) returns (Empty);
  // A simplistic notification scheme to send updates to the test manager.
  rpc Notification (Empty) returns (stream Event);
  // The controller can send messages to specific clients in order to instruct them to do things.
  rpc SendCommand (CommandMessage) returns (Empty);
}
